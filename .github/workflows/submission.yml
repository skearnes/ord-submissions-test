# Runs process_dataset.py on all new and changed files.
#
# If this workflow is triggered by a `pull_request` event (usually on the
# master branch of the upstream repo), process_datasets.py only performs
# validation. This provides status updates for submission PRs at the base repo
# level.
#
# If this workflow is triggered by a `push` event (usually in a forked repo),
# process_datasets.py is run with --update and --clean, which writes updated
# submission protos and replaces the original submission files in git. Based on
# research by kearnes@, there is no way to commit to a forked repo in an action
# triggered by a `pull_request` event in the upstream repo.

name: Submission

on: [pull_request, push]

jobs:
  process_submission:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout ord-data
      uses: actions/checkout@v2
    - name: Checkout ord-schema
      uses: actions/checkout@v2
      with:
        repository: skearnes/ord-schema  # DO NOT SUBMIT
        ref: stats  # DO NOT SUBMIT
        path: ord-schema
    - name: Identify changed files
      # NOTE(kearnes): This sets the NUM_CHANGED_FILES variable.
      run: |
        cd "${GITHUB_WORKSPACE}"
        ./ord-schema/actions/changed_files.sh
    - name: Install miniconda
      uses: s-weigand/setup-conda@v1
      with:
        update-conda: true
      if: env.NUM_CHANGED_FILES != '0'
    - name: Install dependencies
      run: |
        cd "${GITHUB_WORKSPACE}/ord-schema"
        pip install -r requirements.txt
        conda install -c rdkit rdkit
        python setup.py install
      if: env.NUM_CHANGED_FILES != '0'
    - name: Validate submission
      run: |
        cd "${GITHUB_WORKSPACE}"
        python ./ord-schema/ord_schema/process_dataset.py \
          --input_file=changed_pbtxt_files.txt
        pip install pygithub
        python ./ord-schema/actions/change_stats.py \
          --base=upstream/main \
          --issue=${{ github.event.number }} \
          --token=${{ secrets.GITHUB_TOKEN }}
      if: github.event_name == 'pull_request' && env.NUM_CHANGED_FILES != '0'
    - name: Update submission
      run: |
        cd "${GITHUB_WORKSPACE}"
        python ./ord-schema/ord_schema/process_dataset.py \
          --input_file=changed_pbtxt_files.txt \
          --update \
          --cleanup
        ./ord-schema/actions/commit_changes.sh "Validate/update submission"
      if: github.event_name == 'push' && env.NUM_CHANGED_FILES != '0'
